/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as AboutRouteImport } from './routes/about'
import { Route as Layout1RouteImport } from './routes/_layout1'
import { Route as UserUsernameRouteImport } from './routes/user.$username'
import { Route as Layout1UserRouteRouteImport } from './routes/_layout1/user/route'

const IndexLazyRouteImport = createFileRoute('/')()

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const Layout1Route = Layout1RouteImport.update({
  id: '/_layout1',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const UserUsernameRoute = UserUsernameRouteImport.update({
  id: '/user/$username',
  path: '/user/$username',
  getParentRoute: () => rootRouteImport,
} as any)
const Layout1UserRouteRoute = Layout1UserRouteRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => Layout1Route,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/posts': typeof PostsRoute
  '/search': typeof SearchRoute
  '/user': typeof Layout1UserRouteRoute
  '/user/$username': typeof UserUsernameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRoute
  '/posts': typeof PostsRoute
  '/search': typeof SearchRoute
  '/user': typeof Layout1UserRouteRoute
  '/user/$username': typeof UserUsernameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/_layout1': typeof Layout1RouteWithChildren
  '/about': typeof AboutRoute
  '/posts': typeof PostsRoute
  '/search': typeof SearchRoute
  '/_layout1/user': typeof Layout1UserRouteRoute
  '/user/$username': typeof UserUsernameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/posts' | '/search' | '/user' | '/user/$username'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/posts' | '/search' | '/user' | '/user/$username'
  id:
    | '__root__'
    | '/'
    | '/_layout1'
    | '/about'
    | '/posts'
    | '/search'
    | '/_layout1/user'
    | '/user/$username'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  Layout1Route: typeof Layout1RouteWithChildren
  AboutRoute: typeof AboutRoute
  PostsRoute: typeof PostsRoute
  SearchRoute: typeof SearchRoute
  UserUsernameRoute: typeof UserUsernameRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout1': {
      id: '/_layout1'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Layout1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/$username': {
      id: '/user/$username'
      path: '/user/$username'
      fullPath: '/user/$username'
      preLoaderRoute: typeof UserUsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout1/user': {
      id: '/_layout1/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof Layout1UserRouteRouteImport
      parentRoute: typeof Layout1Route
    }
  }
}

interface Layout1RouteChildren {
  Layout1UserRouteRoute: typeof Layout1UserRouteRoute
}

const Layout1RouteChildren: Layout1RouteChildren = {
  Layout1UserRouteRoute: Layout1UserRouteRoute,
}

const Layout1RouteWithChildren =
  Layout1Route._addFileChildren(Layout1RouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  Layout1Route: Layout1RouteWithChildren,
  AboutRoute: AboutRoute,
  PostsRoute: PostsRoute,
  SearchRoute: SearchRoute,
  UserUsernameRoute: UserUsernameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
